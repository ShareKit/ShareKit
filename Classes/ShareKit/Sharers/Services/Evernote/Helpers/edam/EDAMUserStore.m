/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"

#import "EDAMTypes.h"
#import "EDAMErrors.h"

#import "EDAMUserStore.h"

static int16_t EDAMEDAM_VERSION_MAJOR = 1;
static int16_t EDAMEDAM_VERSION_MINOR = 21;

@implementation EDAMUserStoreConstants
+ (void) initialize {
}
+ (int16_t) EDAM_VERSION_MAJOR{
  return EDAMEDAM_VERSION_MAJOR;
}
+ (int16_t) EDAM_VERSION_MINOR{
  return EDAMEDAM_VERSION_MINOR;
}
@end

@implementation EDAMPublicUserInfo

- (id) initWithUserId: (EDAMUserID) userId shardId: (NSString *) shardId privilege: (int) privilege username: (NSString *) username noteStoreUrl: (NSString *) noteStoreUrl
{
  self = [super init];
  __userId = userId;
  __userId_isset = YES;
  __shardId = [shardId retain];
  __shardId_isset = YES;
  __privilege = privilege;
  __privilege_isset = YES;
  __username = [username retain];
  __username_isset = YES;
  __noteStoreUrl = [noteStoreUrl retain];
  __noteStoreUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"shardId"])
  {
    __shardId = [[decoder decodeObjectForKey: @"shardId"] retain];
    __shardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"privilege"])
  {
    __privilege = [decoder decodeIntForKey: @"privilege"];
    __privilege_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"noteStoreUrl"])
  {
    __noteStoreUrl = [[decoder decodeObjectForKey: @"noteStoreUrl"] retain];
    __noteStoreUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__shardId_isset)
  {
    [encoder encodeObject: __shardId forKey: @"shardId"];
  }
  if (__privilege_isset)
  {
    [encoder encodeInt: __privilege forKey: @"privilege"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__noteStoreUrl_isset)
  {
    [encoder encodeObject: __noteStoreUrl forKey: @"noteStoreUrl"];
  }
}

- (void) dealloc
{
  [__shardId release];
  [__username release];
  [__noteStoreUrl release];
  [super dealloc];
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (NSString *) shardId {
  return [[__shardId retain] autorelease];
}

- (void) setShardId: (NSString *) shardId {
  [shardId retain];
  [__shardId release];
  __shardId = shardId;
  __shardId_isset = YES;
}

- (BOOL) shardIdIsSet {
  return __shardId_isset;
}

- (void) unsetShardId {
  [__shardId release];
  __shardId = nil;
  __shardId_isset = NO;
}

- (int) privilege {
  return __privilege;
}

- (void) setPrivilege: (int) privilege {
  __privilege = privilege;
  __privilege_isset = YES;
}

- (BOOL) privilegeIsSet {
  return __privilege_isset;
}

- (void) unsetPrivilege {
  __privilege_isset = NO;
}

- (NSString *) username {
  return [[__username retain] autorelease];
}

- (void) setUsername: (NSString *) username {
  [username retain];
  [__username release];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) noteStoreUrl {
  return [[__noteStoreUrl retain] autorelease];
}

- (void) setNoteStoreUrl: (NSString *) noteStoreUrl {
  [noteStoreUrl retain];
  [__noteStoreUrl release];
  __noteStoreUrl = noteStoreUrl;
  __noteStoreUrl_isset = YES;
}

- (BOOL) noteStoreUrlIsSet {
  return __noteStoreUrl_isset;
}

- (void) unsetNoteStoreUrl {
  [__noteStoreUrl release];
  __noteStoreUrl = nil;
  __noteStoreUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPrivilege: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNoteStoreUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PublicUserInfo"];
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__shardId_isset) {
    if (__shardId != nil) {
      [outProtocol writeFieldBeginWithName: @"shardId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __shardId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privilege_isset) {
    [outProtocol writeFieldBeginWithName: @"privilege" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __privilege];
    [outProtocol writeFieldEnd];
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__noteStoreUrl_isset) {
    if (__noteStoreUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"noteStoreUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __noteStoreUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PublicUserInfo("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",shardId:"];
  [ms appendFormat: @"\"%@\"", __shardId];
  [ms appendString: @",privilege:"];
  [ms appendFormat: @"%i", __privilege];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",noteStoreUrl:"];
  [ms appendFormat: @"\"%@\"", __noteStoreUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMPremiumInfo

- (id) initWithCurrentTime: (EDAMTimestamp) currentTime premium: (BOOL) premium premiumRecurring: (BOOL) premiumRecurring premiumExpirationDate: (EDAMTimestamp) premiumExpirationDate premiumExtendable: (BOOL) premiumExtendable premiumPending: (BOOL) premiumPending premiumCancellationPending: (BOOL) premiumCancellationPending canPurchaseUploadAllowance: (BOOL) canPurchaseUploadAllowance sponsoredGroupName: (NSString *) sponsoredGroupName sponsoredGroupRole: (int) sponsoredGroupRole
{
  self = [super init];
  __currentTime = currentTime;
  __currentTime_isset = YES;
  __premium = premium;
  __premium_isset = YES;
  __premiumRecurring = premiumRecurring;
  __premiumRecurring_isset = YES;
  __premiumExpirationDate = premiumExpirationDate;
  __premiumExpirationDate_isset = YES;
  __premiumExtendable = premiumExtendable;
  __premiumExtendable_isset = YES;
  __premiumPending = premiumPending;
  __premiumPending_isset = YES;
  __premiumCancellationPending = premiumCancellationPending;
  __premiumCancellationPending_isset = YES;
  __canPurchaseUploadAllowance = canPurchaseUploadAllowance;
  __canPurchaseUploadAllowance_isset = YES;
  __sponsoredGroupName = [sponsoredGroupName retain];
  __sponsoredGroupName_isset = YES;
  __sponsoredGroupRole = sponsoredGroupRole;
  __sponsoredGroupRole_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentTime"])
  {
    __currentTime = [decoder decodeInt64ForKey: @"currentTime"];
    __currentTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [decoder decodeBoolForKey: @"premium"];
    __premium_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumRecurring"])
  {
    __premiumRecurring = [decoder decodeBoolForKey: @"premiumRecurring"];
    __premiumRecurring_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumExpirationDate"])
  {
    __premiumExpirationDate = [decoder decodeInt64ForKey: @"premiumExpirationDate"];
    __premiumExpirationDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumExtendable"])
  {
    __premiumExtendable = [decoder decodeBoolForKey: @"premiumExtendable"];
    __premiumExtendable_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumPending"])
  {
    __premiumPending = [decoder decodeBoolForKey: @"premiumPending"];
    __premiumPending_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumCancellationPending"])
  {
    __premiumCancellationPending = [decoder decodeBoolForKey: @"premiumCancellationPending"];
    __premiumCancellationPending_isset = YES;
  }
  if ([decoder containsValueForKey: @"canPurchaseUploadAllowance"])
  {
    __canPurchaseUploadAllowance = [decoder decodeBoolForKey: @"canPurchaseUploadAllowance"];
    __canPurchaseUploadAllowance_isset = YES;
  }
  if ([decoder containsValueForKey: @"sponsoredGroupName"])
  {
    __sponsoredGroupName = [[decoder decodeObjectForKey: @"sponsoredGroupName"] retain];
    __sponsoredGroupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sponsoredGroupRole"])
  {
    __sponsoredGroupRole = [decoder decodeIntForKey: @"sponsoredGroupRole"];
    __sponsoredGroupRole_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentTime_isset)
  {
    [encoder encodeInt64: __currentTime forKey: @"currentTime"];
  }
  if (__premium_isset)
  {
    [encoder encodeBool: __premium forKey: @"premium"];
  }
  if (__premiumRecurring_isset)
  {
    [encoder encodeBool: __premiumRecurring forKey: @"premiumRecurring"];
  }
  if (__premiumExpirationDate_isset)
  {
    [encoder encodeInt64: __premiumExpirationDate forKey: @"premiumExpirationDate"];
  }
  if (__premiumExtendable_isset)
  {
    [encoder encodeBool: __premiumExtendable forKey: @"premiumExtendable"];
  }
  if (__premiumPending_isset)
  {
    [encoder encodeBool: __premiumPending forKey: @"premiumPending"];
  }
  if (__premiumCancellationPending_isset)
  {
    [encoder encodeBool: __premiumCancellationPending forKey: @"premiumCancellationPending"];
  }
  if (__canPurchaseUploadAllowance_isset)
  {
    [encoder encodeBool: __canPurchaseUploadAllowance forKey: @"canPurchaseUploadAllowance"];
  }
  if (__sponsoredGroupName_isset)
  {
    [encoder encodeObject: __sponsoredGroupName forKey: @"sponsoredGroupName"];
  }
  if (__sponsoredGroupRole_isset)
  {
    [encoder encodeInt: __sponsoredGroupRole forKey: @"sponsoredGroupRole"];
  }
}

- (void) dealloc
{
  [__sponsoredGroupName release];
  [super dealloc];
}

- (int64_t) currentTime {
  return __currentTime;
}

- (void) setCurrentTime: (int64_t) currentTime {
  __currentTime = currentTime;
  __currentTime_isset = YES;
}

- (BOOL) currentTimeIsSet {
  return __currentTime_isset;
}

- (void) unsetCurrentTime {
  __currentTime_isset = NO;
}

- (BOOL) premium {
  return __premium;
}

- (void) setPremium: (BOOL) premium {
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  __premium_isset = NO;
}

- (BOOL) premiumRecurring {
  return __premiumRecurring;
}

- (void) setPremiumRecurring: (BOOL) premiumRecurring {
  __premiumRecurring = premiumRecurring;
  __premiumRecurring_isset = YES;
}

- (BOOL) premiumRecurringIsSet {
  return __premiumRecurring_isset;
}

- (void) unsetPremiumRecurring {
  __premiumRecurring_isset = NO;
}

- (int64_t) premiumExpirationDate {
  return __premiumExpirationDate;
}

- (void) setPremiumExpirationDate: (int64_t) premiumExpirationDate {
  __premiumExpirationDate = premiumExpirationDate;
  __premiumExpirationDate_isset = YES;
}

- (BOOL) premiumExpirationDateIsSet {
  return __premiumExpirationDate_isset;
}

- (void) unsetPremiumExpirationDate {
  __premiumExpirationDate_isset = NO;
}

- (BOOL) premiumExtendable {
  return __premiumExtendable;
}

- (void) setPremiumExtendable: (BOOL) premiumExtendable {
  __premiumExtendable = premiumExtendable;
  __premiumExtendable_isset = YES;
}

- (BOOL) premiumExtendableIsSet {
  return __premiumExtendable_isset;
}

- (void) unsetPremiumExtendable {
  __premiumExtendable_isset = NO;
}

- (BOOL) premiumPending {
  return __premiumPending;
}

- (void) setPremiumPending: (BOOL) premiumPending {
  __premiumPending = premiumPending;
  __premiumPending_isset = YES;
}

- (BOOL) premiumPendingIsSet {
  return __premiumPending_isset;
}

- (void) unsetPremiumPending {
  __premiumPending_isset = NO;
}

- (BOOL) premiumCancellationPending {
  return __premiumCancellationPending;
}

- (void) setPremiumCancellationPending: (BOOL) premiumCancellationPending {
  __premiumCancellationPending = premiumCancellationPending;
  __premiumCancellationPending_isset = YES;
}

- (BOOL) premiumCancellationPendingIsSet {
  return __premiumCancellationPending_isset;
}

- (void) unsetPremiumCancellationPending {
  __premiumCancellationPending_isset = NO;
}

- (BOOL) canPurchaseUploadAllowance {
  return __canPurchaseUploadAllowance;
}

- (void) setCanPurchaseUploadAllowance: (BOOL) canPurchaseUploadAllowance {
  __canPurchaseUploadAllowance = canPurchaseUploadAllowance;
  __canPurchaseUploadAllowance_isset = YES;
}

- (BOOL) canPurchaseUploadAllowanceIsSet {
  return __canPurchaseUploadAllowance_isset;
}

- (void) unsetCanPurchaseUploadAllowance {
  __canPurchaseUploadAllowance_isset = NO;
}

- (NSString *) sponsoredGroupName {
  return [[__sponsoredGroupName retain] autorelease];
}

- (void) setSponsoredGroupName: (NSString *) sponsoredGroupName {
  [sponsoredGroupName retain];
  [__sponsoredGroupName release];
  __sponsoredGroupName = sponsoredGroupName;
  __sponsoredGroupName_isset = YES;
}

- (BOOL) sponsoredGroupNameIsSet {
  return __sponsoredGroupName_isset;
}

- (void) unsetSponsoredGroupName {
  [__sponsoredGroupName release];
  __sponsoredGroupName = nil;
  __sponsoredGroupName_isset = NO;
}

- (int) sponsoredGroupRole {
  return __sponsoredGroupRole;
}

- (void) setSponsoredGroupRole: (int) sponsoredGroupRole {
  __sponsoredGroupRole = sponsoredGroupRole;
  __sponsoredGroupRole_isset = YES;
}

- (BOOL) sponsoredGroupRoleIsSet {
  return __sponsoredGroupRole_isset;
}

- (void) unsetSponsoredGroupRole {
  __sponsoredGroupRole_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCurrentTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumRecurring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPremiumExpirationDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumExtendable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumPending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumCancellationPending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCanPurchaseUploadAllowance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSponsoredGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSponsoredGroupRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PremiumInfo"];
  if (__currentTime_isset) {
    [outProtocol writeFieldBeginWithName: @"currentTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __currentTime];
    [outProtocol writeFieldEnd];
  }
  if (__premium_isset) {
    [outProtocol writeFieldBeginWithName: @"premium" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __premium];
    [outProtocol writeFieldEnd];
  }
  if (__premiumRecurring_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumRecurring" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __premiumRecurring];
    [outProtocol writeFieldEnd];
  }
  if (__premiumExpirationDate_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumExpirationDate" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __premiumExpirationDate];
    [outProtocol writeFieldEnd];
  }
  if (__premiumExtendable_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumExtendable" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __premiumExtendable];
    [outProtocol writeFieldEnd];
  }
  if (__premiumPending_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumPending" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __premiumPending];
    [outProtocol writeFieldEnd];
  }
  if (__premiumCancellationPending_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumCancellationPending" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __premiumCancellationPending];
    [outProtocol writeFieldEnd];
  }
  if (__canPurchaseUploadAllowance_isset) {
    [outProtocol writeFieldBeginWithName: @"canPurchaseUploadAllowance" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __canPurchaseUploadAllowance];
    [outProtocol writeFieldEnd];
  }
  if (__sponsoredGroupName_isset) {
    if (__sponsoredGroupName != nil) {
      [outProtocol writeFieldBeginWithName: @"sponsoredGroupName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __sponsoredGroupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sponsoredGroupRole_isset) {
    [outProtocol writeFieldBeginWithName: @"sponsoredGroupRole" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __sponsoredGroupRole];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PremiumInfo("];
  [ms appendString: @"currentTime:"];
  [ms appendFormat: @"%qi", __currentTime];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"%i", __premium];
  [ms appendString: @",premiumRecurring:"];
  [ms appendFormat: @"%i", __premiumRecurring];
  [ms appendString: @",premiumExpirationDate:"];
  [ms appendFormat: @"%qi", __premiumExpirationDate];
  [ms appendString: @",premiumExtendable:"];
  [ms appendFormat: @"%i", __premiumExtendable];
  [ms appendString: @",premiumPending:"];
  [ms appendFormat: @"%i", __premiumPending];
  [ms appendString: @",premiumCancellationPending:"];
  [ms appendFormat: @"%i", __premiumCancellationPending];
  [ms appendString: @",canPurchaseUploadAllowance:"];
  [ms appendFormat: @"%i", __canPurchaseUploadAllowance];
  [ms appendString: @",sponsoredGroupName:"];
  [ms appendFormat: @"\"%@\"", __sponsoredGroupName];
  [ms appendString: @",sponsoredGroupRole:"];
  [ms appendFormat: @"%i", __sponsoredGroupRole];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMAuthenticationResult

- (id) initWithCurrentTime: (EDAMTimestamp) currentTime authenticationToken: (NSString *) authenticationToken expiration: (EDAMTimestamp) expiration user: (EDAMUser *) user publicUserInfo: (EDAMPublicUserInfo *) publicUserInfo noteStoreUrl: (NSString *) noteStoreUrl webApiUrlPrefix: (NSString *) webApiUrlPrefix
{
  self = [super init];
  __currentTime = currentTime;
  __currentTime_isset = YES;
  __authenticationToken = [authenticationToken retain];
  __authenticationToken_isset = YES;
  __expiration = expiration;
  __expiration_isset = YES;
  __user = [user retain];
  __user_isset = YES;
  __publicUserInfo = [publicUserInfo retain];
  __publicUserInfo_isset = YES;
  __noteStoreUrl = [noteStoreUrl retain];
  __noteStoreUrl_isset = YES;
  __webApiUrlPrefix = [webApiUrlPrefix retain];
  __webApiUrlPrefix_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentTime"])
  {
    __currentTime = [decoder decodeInt64ForKey: @"currentTime"];
    __currentTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"authenticationToken"])
  {
    __authenticationToken = [[decoder decodeObjectForKey: @"authenticationToken"] retain];
    __authenticationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"expiration"])
  {
    __expiration = [decoder decodeInt64ForKey: @"expiration"];
    __expiration_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"publicUserInfo"])
  {
    __publicUserInfo = [[decoder decodeObjectForKey: @"publicUserInfo"] retain];
    __publicUserInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"noteStoreUrl"])
  {
    __noteStoreUrl = [[decoder decodeObjectForKey: @"noteStoreUrl"] retain];
    __noteStoreUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"webApiUrlPrefix"])
  {
    __webApiUrlPrefix = [[decoder decodeObjectForKey: @"webApiUrlPrefix"] retain];
    __webApiUrlPrefix_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentTime_isset)
  {
    [encoder encodeInt64: __currentTime forKey: @"currentTime"];
  }
  if (__authenticationToken_isset)
  {
    [encoder encodeObject: __authenticationToken forKey: @"authenticationToken"];
  }
  if (__expiration_isset)
  {
    [encoder encodeInt64: __expiration forKey: @"expiration"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__publicUserInfo_isset)
  {
    [encoder encodeObject: __publicUserInfo forKey: @"publicUserInfo"];
  }
  if (__noteStoreUrl_isset)
  {
    [encoder encodeObject: __noteStoreUrl forKey: @"noteStoreUrl"];
  }
  if (__webApiUrlPrefix_isset)
  {
    [encoder encodeObject: __webApiUrlPrefix forKey: @"webApiUrlPrefix"];
  }
}

- (void) dealloc
{
  [__authenticationToken release];
  [__user release];
  [__publicUserInfo release];
  [__noteStoreUrl release];
  [__webApiUrlPrefix release];
  [super dealloc];
}

- (int64_t) currentTime {
  return __currentTime;
}

- (void) setCurrentTime: (int64_t) currentTime {
  __currentTime = currentTime;
  __currentTime_isset = YES;
}

- (BOOL) currentTimeIsSet {
  return __currentTime_isset;
}

- (void) unsetCurrentTime {
  __currentTime_isset = NO;
}

- (NSString *) authenticationToken {
  return [[__authenticationToken retain] autorelease];
}

- (void) setAuthenticationToken: (NSString *) authenticationToken {
  [authenticationToken retain];
  [__authenticationToken release];
  __authenticationToken = authenticationToken;
  __authenticationToken_isset = YES;
}

- (BOOL) authenticationTokenIsSet {
  return __authenticationToken_isset;
}

- (void) unsetAuthenticationToken {
  [__authenticationToken release];
  __authenticationToken = nil;
  __authenticationToken_isset = NO;
}

- (int64_t) expiration {
  return __expiration;
}

- (void) setExpiration: (int64_t) expiration {
  __expiration = expiration;
  __expiration_isset = YES;
}

- (BOOL) expirationIsSet {
  return __expiration_isset;
}

- (void) unsetExpiration {
  __expiration_isset = NO;
}

- (EDAMUser *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (EDAMUser *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (EDAMPublicUserInfo *) publicUserInfo {
  return [[__publicUserInfo retain] autorelease];
}

- (void) setPublicUserInfo: (EDAMPublicUserInfo *) publicUserInfo {
  [publicUserInfo retain];
  [__publicUserInfo release];
  __publicUserInfo = publicUserInfo;
  __publicUserInfo_isset = YES;
}

- (BOOL) publicUserInfoIsSet {
  return __publicUserInfo_isset;
}

- (void) unsetPublicUserInfo {
  [__publicUserInfo release];
  __publicUserInfo = nil;
  __publicUserInfo_isset = NO;
}

- (NSString *) noteStoreUrl {
  return [[__noteStoreUrl retain] autorelease];
}

- (void) setNoteStoreUrl: (NSString *) noteStoreUrl {
  [noteStoreUrl retain];
  [__noteStoreUrl release];
  __noteStoreUrl = noteStoreUrl;
  __noteStoreUrl_isset = YES;
}

- (BOOL) noteStoreUrlIsSet {
  return __noteStoreUrl_isset;
}

- (void) unsetNoteStoreUrl {
  [__noteStoreUrl release];
  __noteStoreUrl = nil;
  __noteStoreUrl_isset = NO;
}

- (NSString *) webApiUrlPrefix {
  return [[__webApiUrlPrefix retain] autorelease];
}

- (void) setWebApiUrlPrefix: (NSString *) webApiUrlPrefix {
  [webApiUrlPrefix retain];
  [__webApiUrlPrefix release];
  __webApiUrlPrefix = webApiUrlPrefix;
  __webApiUrlPrefix_isset = YES;
}

- (BOOL) webApiUrlPrefixIsSet {
  return __webApiUrlPrefix_isset;
}

- (void) unsetWebApiUrlPrefix {
  [__webApiUrlPrefix release];
  __webApiUrlPrefix = nil;
  __webApiUrlPrefix_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCurrentTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthenticationToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpiration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          EDAMUser *fieldValue = [[EDAMUser alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          EDAMPublicUserInfo *fieldValue = [[EDAMPublicUserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setPublicUserInfo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNoteStoreUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWebApiUrlPrefix: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthenticationResult"];
  if (__currentTime_isset) {
    [outProtocol writeFieldBeginWithName: @"currentTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __currentTime];
    [outProtocol writeFieldEnd];
  }
  if (__authenticationToken_isset) {
    if (__authenticationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __authenticationToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expiration_isset) {
    [outProtocol writeFieldBeginWithName: @"expiration" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __expiration];
    [outProtocol writeFieldEnd];
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 4];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publicUserInfo_isset) {
    if (__publicUserInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"publicUserInfo" type: TType_STRUCT fieldID: 5];
      [__publicUserInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__noteStoreUrl_isset) {
    if (__noteStoreUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"noteStoreUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __noteStoreUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__webApiUrlPrefix_isset) {
    if (__webApiUrlPrefix != nil) {
      [outProtocol writeFieldBeginWithName: @"webApiUrlPrefix" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __webApiUrlPrefix];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticationResult("];
  [ms appendString: @"currentTime:"];
  [ms appendFormat: @"%qi", __currentTime];
  [ms appendString: @",authenticationToken:"];
  [ms appendFormat: @"\"%@\"", __authenticationToken];
  [ms appendString: @",expiration:"];
  [ms appendFormat: @"%qi", __expiration];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",publicUserInfo:"];
  [ms appendFormat: @"%@", __publicUserInfo];
  [ms appendString: @",noteStoreUrl:"];
  [ms appendFormat: @"\"%@\"", __noteStoreUrl];
  [ms appendString: @",webApiUrlPrefix:"];
  [ms appendFormat: @"\"%@\"", __webApiUrlPrefix];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMBootstrapSettings

- (id) initWithServiceHost: (NSString *) serviceHost marketingUrl: (NSString *) marketingUrl supportUrl: (NSString *) supportUrl accountEmailDomain: (NSString *) accountEmailDomain enableFacebookSharing: (BOOL) enableFacebookSharing enableGiftSubscriptions: (BOOL) enableGiftSubscriptions enableSupportTickets: (BOOL) enableSupportTickets enableSharedNotebooks: (BOOL) enableSharedNotebooks enableSingleNoteSharing: (BOOL) enableSingleNoteSharing enableSponsoredAccounts: (BOOL) enableSponsoredAccounts enableTwitterSharing: (BOOL) enableTwitterSharing
{
  self = [super init];
  __serviceHost = [serviceHost retain];
  __serviceHost_isset = YES;
  __marketingUrl = [marketingUrl retain];
  __marketingUrl_isset = YES;
  __supportUrl = [supportUrl retain];
  __supportUrl_isset = YES;
  __accountEmailDomain = [accountEmailDomain retain];
  __accountEmailDomain_isset = YES;
  __enableFacebookSharing = enableFacebookSharing;
  __enableFacebookSharing_isset = YES;
  __enableGiftSubscriptions = enableGiftSubscriptions;
  __enableGiftSubscriptions_isset = YES;
  __enableSupportTickets = enableSupportTickets;
  __enableSupportTickets_isset = YES;
  __enableSharedNotebooks = enableSharedNotebooks;
  __enableSharedNotebooks_isset = YES;
  __enableSingleNoteSharing = enableSingleNoteSharing;
  __enableSingleNoteSharing_isset = YES;
  __enableSponsoredAccounts = enableSponsoredAccounts;
  __enableSponsoredAccounts_isset = YES;
  __enableTwitterSharing = enableTwitterSharing;
  __enableTwitterSharing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceHost"])
  {
    __serviceHost = [[decoder decodeObjectForKey: @"serviceHost"] retain];
    __serviceHost_isset = YES;
  }
  if ([decoder containsValueForKey: @"marketingUrl"])
  {
    __marketingUrl = [[decoder decodeObjectForKey: @"marketingUrl"] retain];
    __marketingUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"supportUrl"])
  {
    __supportUrl = [[decoder decodeObjectForKey: @"supportUrl"] retain];
    __supportUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountEmailDomain"])
  {
    __accountEmailDomain = [[decoder decodeObjectForKey: @"accountEmailDomain"] retain];
    __accountEmailDomain_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableFacebookSharing"])
  {
    __enableFacebookSharing = [decoder decodeBoolForKey: @"enableFacebookSharing"];
    __enableFacebookSharing_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableGiftSubscriptions"])
  {
    __enableGiftSubscriptions = [decoder decodeBoolForKey: @"enableGiftSubscriptions"];
    __enableGiftSubscriptions_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableSupportTickets"])
  {
    __enableSupportTickets = [decoder decodeBoolForKey: @"enableSupportTickets"];
    __enableSupportTickets_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableSharedNotebooks"])
  {
    __enableSharedNotebooks = [decoder decodeBoolForKey: @"enableSharedNotebooks"];
    __enableSharedNotebooks_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableSingleNoteSharing"])
  {
    __enableSingleNoteSharing = [decoder decodeBoolForKey: @"enableSingleNoteSharing"];
    __enableSingleNoteSharing_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableSponsoredAccounts"])
  {
    __enableSponsoredAccounts = [decoder decodeBoolForKey: @"enableSponsoredAccounts"];
    __enableSponsoredAccounts_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableTwitterSharing"])
  {
    __enableTwitterSharing = [decoder decodeBoolForKey: @"enableTwitterSharing"];
    __enableTwitterSharing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceHost_isset)
  {
    [encoder encodeObject: __serviceHost forKey: @"serviceHost"];
  }
  if (__marketingUrl_isset)
  {
    [encoder encodeObject: __marketingUrl forKey: @"marketingUrl"];
  }
  if (__supportUrl_isset)
  {
    [encoder encodeObject: __supportUrl forKey: @"supportUrl"];
  }
  if (__accountEmailDomain_isset)
  {
    [encoder encodeObject: __accountEmailDomain forKey: @"accountEmailDomain"];
  }
  if (__enableFacebookSharing_isset)
  {
    [encoder encodeBool: __enableFacebookSharing forKey: @"enableFacebookSharing"];
  }
  if (__enableGiftSubscriptions_isset)
  {
    [encoder encodeBool: __enableGiftSubscriptions forKey: @"enableGiftSubscriptions"];
  }
  if (__enableSupportTickets_isset)
  {
    [encoder encodeBool: __enableSupportTickets forKey: @"enableSupportTickets"];
  }
  if (__enableSharedNotebooks_isset)
  {
    [encoder encodeBool: __enableSharedNotebooks forKey: @"enableSharedNotebooks"];
  }
  if (__enableSingleNoteSharing_isset)
  {
    [encoder encodeBool: __enableSingleNoteSharing forKey: @"enableSingleNoteSharing"];
  }
  if (__enableSponsoredAccounts_isset)
  {
    [encoder encodeBool: __enableSponsoredAccounts forKey: @"enableSponsoredAccounts"];
  }
  if (__enableTwitterSharing_isset)
  {
    [encoder encodeBool: __enableTwitterSharing forKey: @"enableTwitterSharing"];
  }
}

- (void) dealloc
{
  [__serviceHost release];
  [__marketingUrl release];
  [__supportUrl release];
  [__accountEmailDomain release];
  [super dealloc];
}

- (NSString *) serviceHost {
  return [[__serviceHost retain] autorelease];
}

- (void) setServiceHost: (NSString *) serviceHost {
  [serviceHost retain];
  [__serviceHost release];
  __serviceHost = serviceHost;
  __serviceHost_isset = YES;
}

- (BOOL) serviceHostIsSet {
  return __serviceHost_isset;
}

- (void) unsetServiceHost {
  [__serviceHost release];
  __serviceHost = nil;
  __serviceHost_isset = NO;
}

- (NSString *) marketingUrl {
  return [[__marketingUrl retain] autorelease];
}

- (void) setMarketingUrl: (NSString *) marketingUrl {
  [marketingUrl retain];
  [__marketingUrl release];
  __marketingUrl = marketingUrl;
  __marketingUrl_isset = YES;
}

- (BOOL) marketingUrlIsSet {
  return __marketingUrl_isset;
}

- (void) unsetMarketingUrl {
  [__marketingUrl release];
  __marketingUrl = nil;
  __marketingUrl_isset = NO;
}

- (NSString *) supportUrl {
  return [[__supportUrl retain] autorelease];
}

- (void) setSupportUrl: (NSString *) supportUrl {
  [supportUrl retain];
  [__supportUrl release];
  __supportUrl = supportUrl;
  __supportUrl_isset = YES;
}

- (BOOL) supportUrlIsSet {
  return __supportUrl_isset;
}

- (void) unsetSupportUrl {
  [__supportUrl release];
  __supportUrl = nil;
  __supportUrl_isset = NO;
}

- (NSString *) accountEmailDomain {
  return [[__accountEmailDomain retain] autorelease];
}

- (void) setAccountEmailDomain: (NSString *) accountEmailDomain {
  [accountEmailDomain retain];
  [__accountEmailDomain release];
  __accountEmailDomain = accountEmailDomain;
  __accountEmailDomain_isset = YES;
}

- (BOOL) accountEmailDomainIsSet {
  return __accountEmailDomain_isset;
}

- (void) unsetAccountEmailDomain {
  [__accountEmailDomain release];
  __accountEmailDomain = nil;
  __accountEmailDomain_isset = NO;
}

- (BOOL) enableFacebookSharing {
  return __enableFacebookSharing;
}

- (void) setEnableFacebookSharing: (BOOL) enableFacebookSharing {
  __enableFacebookSharing = enableFacebookSharing;
  __enableFacebookSharing_isset = YES;
}

- (BOOL) enableFacebookSharingIsSet {
  return __enableFacebookSharing_isset;
}

- (void) unsetEnableFacebookSharing {
  __enableFacebookSharing_isset = NO;
}

- (BOOL) enableGiftSubscriptions {
  return __enableGiftSubscriptions;
}

- (void) setEnableGiftSubscriptions: (BOOL) enableGiftSubscriptions {
  __enableGiftSubscriptions = enableGiftSubscriptions;
  __enableGiftSubscriptions_isset = YES;
}

- (BOOL) enableGiftSubscriptionsIsSet {
  return __enableGiftSubscriptions_isset;
}

- (void) unsetEnableGiftSubscriptions {
  __enableGiftSubscriptions_isset = NO;
}

- (BOOL) enableSupportTickets {
  return __enableSupportTickets;
}

- (void) setEnableSupportTickets: (BOOL) enableSupportTickets {
  __enableSupportTickets = enableSupportTickets;
  __enableSupportTickets_isset = YES;
}

- (BOOL) enableSupportTicketsIsSet {
  return __enableSupportTickets_isset;
}

- (void) unsetEnableSupportTickets {
  __enableSupportTickets_isset = NO;
}

- (BOOL) enableSharedNotebooks {
  return __enableSharedNotebooks;
}

- (void) setEnableSharedNotebooks: (BOOL) enableSharedNotebooks {
  __enableSharedNotebooks = enableSharedNotebooks;
  __enableSharedNotebooks_isset = YES;
}

- (BOOL) enableSharedNotebooksIsSet {
  return __enableSharedNotebooks_isset;
}

- (void) unsetEnableSharedNotebooks {
  __enableSharedNotebooks_isset = NO;
}

- (BOOL) enableSingleNoteSharing {
  return __enableSingleNoteSharing;
}

- (void) setEnableSingleNoteSharing: (BOOL) enableSingleNoteSharing {
  __enableSingleNoteSharing = enableSingleNoteSharing;
  __enableSingleNoteSharing_isset = YES;
}

- (BOOL) enableSingleNoteSharingIsSet {
  return __enableSingleNoteSharing_isset;
}

- (void) unsetEnableSingleNoteSharing {
  __enableSingleNoteSharing_isset = NO;
}

- (BOOL) enableSponsoredAccounts {
  return __enableSponsoredAccounts;
}

- (void) setEnableSponsoredAccounts: (BOOL) enableSponsoredAccounts {
  __enableSponsoredAccounts = enableSponsoredAccounts;
  __enableSponsoredAccounts_isset = YES;
}

- (BOOL) enableSponsoredAccountsIsSet {
  return __enableSponsoredAccounts_isset;
}

- (void) unsetEnableSponsoredAccounts {
  __enableSponsoredAccounts_isset = NO;
}

- (BOOL) enableTwitterSharing {
  return __enableTwitterSharing;
}

- (void) setEnableTwitterSharing: (BOOL) enableTwitterSharing {
  __enableTwitterSharing = enableTwitterSharing;
  __enableTwitterSharing_isset = YES;
}

- (BOOL) enableTwitterSharingIsSet {
  return __enableTwitterSharing_isset;
}

- (void) unsetEnableTwitterSharing {
  __enableTwitterSharing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceHost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarketingUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSupportUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountEmailDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableFacebookSharing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableGiftSubscriptions: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableSupportTickets: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableSharedNotebooks: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableSingleNoteSharing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableSponsoredAccounts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableTwitterSharing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BootstrapSettings"];
  if (__serviceHost_isset) {
    if (__serviceHost != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceHost" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __serviceHost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__marketingUrl_isset) {
    if (__marketingUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"marketingUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __marketingUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__supportUrl_isset) {
    if (__supportUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"supportUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __supportUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountEmailDomain_isset) {
    if (__accountEmailDomain != nil) {
      [outProtocol writeFieldBeginWithName: @"accountEmailDomain" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __accountEmailDomain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__enableFacebookSharing_isset) {
    [outProtocol writeFieldBeginWithName: @"enableFacebookSharing" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __enableFacebookSharing];
    [outProtocol writeFieldEnd];
  }
  if (__enableGiftSubscriptions_isset) {
    [outProtocol writeFieldBeginWithName: @"enableGiftSubscriptions" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __enableGiftSubscriptions];
    [outProtocol writeFieldEnd];
  }
  if (__enableSupportTickets_isset) {
    [outProtocol writeFieldBeginWithName: @"enableSupportTickets" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __enableSupportTickets];
    [outProtocol writeFieldEnd];
  }
  if (__enableSharedNotebooks_isset) {
    [outProtocol writeFieldBeginWithName: @"enableSharedNotebooks" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __enableSharedNotebooks];
    [outProtocol writeFieldEnd];
  }
  if (__enableSingleNoteSharing_isset) {
    [outProtocol writeFieldBeginWithName: @"enableSingleNoteSharing" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __enableSingleNoteSharing];
    [outProtocol writeFieldEnd];
  }
  if (__enableSponsoredAccounts_isset) {
    [outProtocol writeFieldBeginWithName: @"enableSponsoredAccounts" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __enableSponsoredAccounts];
    [outProtocol writeFieldEnd];
  }
  if (__enableTwitterSharing_isset) {
    [outProtocol writeFieldBeginWithName: @"enableTwitterSharing" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __enableTwitterSharing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BootstrapSettings("];
  [ms appendString: @"serviceHost:"];
  [ms appendFormat: @"\"%@\"", __serviceHost];
  [ms appendString: @",marketingUrl:"];
  [ms appendFormat: @"\"%@\"", __marketingUrl];
  [ms appendString: @",supportUrl:"];
  [ms appendFormat: @"\"%@\"", __supportUrl];
  [ms appendString: @",accountEmailDomain:"];
  [ms appendFormat: @"\"%@\"", __accountEmailDomain];
  [ms appendString: @",enableFacebookSharing:"];
  [ms appendFormat: @"%i", __enableFacebookSharing];
  [ms appendString: @",enableGiftSubscriptions:"];
  [ms appendFormat: @"%i", __enableGiftSubscriptions];
  [ms appendString: @",enableSupportTickets:"];
  [ms appendFormat: @"%i", __enableSupportTickets];
  [ms appendString: @",enableSharedNotebooks:"];
  [ms appendFormat: @"%i", __enableSharedNotebooks];
  [ms appendString: @",enableSingleNoteSharing:"];
  [ms appendFormat: @"%i", __enableSingleNoteSharing];
  [ms appendString: @",enableSponsoredAccounts:"];
  [ms appendFormat: @"%i", __enableSponsoredAccounts];
  [ms appendString: @",enableTwitterSharing:"];
  [ms appendFormat: @"%i", __enableTwitterSharing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMBootstrapProfile

- (id) initWithName: (NSString *) name settings: (EDAMBootstrapSettings *) settings
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __settings = [settings retain];
  __settings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"settings"])
  {
    __settings = [[decoder decodeObjectForKey: @"settings"] retain];
    __settings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__settings_isset)
  {
    [encoder encodeObject: __settings forKey: @"settings"];
  }
}

- (void) dealloc
{
  [__name release];
  [__settings release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (EDAMBootstrapSettings *) settings {
  return [[__settings retain] autorelease];
}

- (void) setSettings: (EDAMBootstrapSettings *) settings {
  [settings retain];
  [__settings release];
  __settings = settings;
  __settings_isset = YES;
}

- (BOOL) settingsIsSet {
  return __settings_isset;
}

- (void) unsetSettings {
  [__settings release];
  __settings = nil;
  __settings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMBootstrapSettings *fieldValue = [[EDAMBootstrapSettings alloc] init];
          [fieldValue read: inProtocol];
          [self setSettings: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BootstrapProfile"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__settings_isset) {
    if (__settings != nil) {
      [outProtocol writeFieldBeginWithName: @"settings" type: TType_STRUCT fieldID: 2];
      [__settings write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BootstrapProfile("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",settings:"];
  [ms appendFormat: @"%@", __settings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMBootstrapInfo

- (id) initWithProfiles: (NSArray *) profiles
{
  self = [super init];
  __profiles = [profiles retain];
  __profiles_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"profiles"])
  {
    __profiles = [[decoder decodeObjectForKey: @"profiles"] retain];
    __profiles_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__profiles_isset)
  {
    [encoder encodeObject: __profiles forKey: @"profiles"];
  }
}

- (void) dealloc
{
  [__profiles release];
  [super dealloc];
}

- (NSArray *) profiles {
  return [[__profiles retain] autorelease];
}

- (void) setProfiles: (NSArray *) profiles {
  [profiles retain];
  [__profiles release];
  __profiles = profiles;
  __profiles_isset = YES;
}

- (BOOL) profilesIsSet {
  return __profiles_isset;
}

- (void) unsetProfiles {
  [__profiles release];
  __profiles = nil;
  __profiles_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            EDAMBootstrapProfile *_elem2 = [[EDAMBootstrapProfile alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setProfiles: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BootstrapInfo"];
  if (__profiles_isset) {
    if (__profiles != nil) {
      [outProtocol writeFieldBeginWithName: @"profiles" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__profiles count]];
        int i4;
        for (i4 = 0; i4 < [__profiles count]; i4++)
        {
          [[__profiles objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BootstrapInfo("];
  [ms appendString: @"profiles:"];
  [ms appendFormat: @"%@", __profiles];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMcheckVersion_args : NSObject <NSCoding> {
  NSString * __clientName;
  int16_t __edamVersionMajor;
  int16_t __edamVersionMinor;

  BOOL __clientName_isset;
  BOOL __edamVersionMajor_isset;
  BOOL __edamVersionMinor_isset;
}

- (id) initWithClientName: (NSString *) clientName edamVersionMajor: (int16_t) edamVersionMajor edamVersionMinor: (int16_t) edamVersionMinor;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clientName, setter=setClientName:) NSString * clientName;
@property (nonatomic, getter=edamVersionMajor, setter=setEdamVersionMajor:) int16_t edamVersionMajor;
@property (nonatomic, getter=edamVersionMinor, setter=setEdamVersionMinor:) int16_t edamVersionMinor;
#else

- (NSString *) clientName;
- (void) setClientName: (NSString *) clientName;

- (int16_t) edamVersionMajor;
- (void) setEdamVersionMajor: (int16_t) edamVersionMajor;

- (int16_t) edamVersionMinor;
- (void) setEdamVersionMinor: (int16_t) edamVersionMinor;

#endif

- (BOOL) clientNameIsSet;
- (BOOL) edamVersionMajorIsSet;
- (BOOL) edamVersionMinorIsSet;
@end

@implementation EDAMcheckVersion_args

- (id) initWithClientName: (NSString *) clientName edamVersionMajor: (int16_t) edamVersionMajor edamVersionMinor: (int16_t) edamVersionMinor
{
  self = [super init];
  __clientName = [clientName retain];
  __clientName_isset = YES;
  __edamVersionMajor = edamVersionMajor;
  __edamVersionMajor_isset = YES;
  __edamVersionMinor = edamVersionMinor;
  __edamVersionMinor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clientName"])
  {
    __clientName = [[decoder decodeObjectForKey: @"clientName"] retain];
    __clientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"edamVersionMajor"])
  {
    __edamVersionMajor = [decoder decodeIntForKey: @"edamVersionMajor"];
    __edamVersionMajor_isset = YES;
  }
  if ([decoder containsValueForKey: @"edamVersionMinor"])
  {
    __edamVersionMinor = [decoder decodeIntForKey: @"edamVersionMinor"];
    __edamVersionMinor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clientName_isset)
  {
    [encoder encodeObject: __clientName forKey: @"clientName"];
  }
  if (__edamVersionMajor_isset)
  {
    [encoder encodeInt: __edamVersionMajor forKey: @"edamVersionMajor"];
  }
  if (__edamVersionMinor_isset)
  {
    [encoder encodeInt: __edamVersionMinor forKey: @"edamVersionMinor"];
  }
}

- (void) dealloc
{
  [__clientName release];
  [super dealloc];
}

- (NSString *) clientName {
  return [[__clientName retain] autorelease];
}

- (void) setClientName: (NSString *) clientName {
  [clientName retain];
  [__clientName release];
  __clientName = clientName;
  __clientName_isset = YES;
}

- (BOOL) clientNameIsSet {
  return __clientName_isset;
}

- (void) unsetClientName {
  [__clientName release];
  __clientName = nil;
  __clientName_isset = NO;
}

- (int16_t) edamVersionMajor {
  return __edamVersionMajor;
}

- (void) setEdamVersionMajor: (int16_t) edamVersionMajor {
  __edamVersionMajor = edamVersionMajor;
  __edamVersionMajor_isset = YES;
}

- (BOOL) edamVersionMajorIsSet {
  return __edamVersionMajor_isset;
}

- (void) unsetEdamVersionMajor {
  __edamVersionMajor_isset = NO;
}

- (int16_t) edamVersionMinor {
  return __edamVersionMinor;
}

- (void) setEdamVersionMinor: (int16_t) edamVersionMinor {
  __edamVersionMinor = edamVersionMinor;
  __edamVersionMinor_isset = YES;
}

- (BOOL) edamVersionMinorIsSet {
  return __edamVersionMinor_isset;
}

- (void) unsetEdamVersionMinor {
  __edamVersionMinor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setEdamVersionMajor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setEdamVersionMinor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"checkVersion_args"];
  if (__clientName_isset) {
    if (__clientName != nil) {
      [outProtocol writeFieldBeginWithName: @"clientName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__edamVersionMajor_isset) {
    [outProtocol writeFieldBeginWithName: @"edamVersionMajor" type: TType_I16 fieldID: 2];
    [outProtocol writeI16: __edamVersionMajor];
    [outProtocol writeFieldEnd];
  }
  if (__edamVersionMinor_isset) {
    [outProtocol writeFieldBeginWithName: @"edamVersionMinor" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: __edamVersionMinor];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"checkVersion_args("];
  [ms appendString: @"clientName:"];
  [ms appendFormat: @"\"%@\"", __clientName];
  [ms appendString: @",edamVersionMajor:"];
  [ms appendFormat: @"%hi", __edamVersionMajor];
  [ms appendString: @",edamVersionMinor:"];
  [ms appendFormat: @"%hi", __edamVersionMinor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMCheckVersion_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#else

- (BOOL) success;
- (void) setSuccess: (BOOL) success;

#endif

- (BOOL) successIsSet;
@end

@implementation EDAMCheckVersion_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CheckVersion_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CheckVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMgetBootstrapInfo_args : NSObject <NSCoding> {
  NSString * __locale;

  BOOL __locale_isset;
}

- (id) initWithLocale: (NSString *) locale;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=locale, setter=setLocale:) NSString * locale;
#else

- (NSString *) locale;
- (void) setLocale: (NSString *) locale;

#endif

- (BOOL) localeIsSet;
@end

@implementation EDAMgetBootstrapInfo_args

- (id) initWithLocale: (NSString *) locale
{
  self = [super init];
  __locale = [locale retain];
  __locale_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"locale"])
  {
    __locale = [[decoder decodeObjectForKey: @"locale"] retain];
    __locale_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__locale_isset)
  {
    [encoder encodeObject: __locale forKey: @"locale"];
  }
}

- (void) dealloc
{
  [__locale release];
  [super dealloc];
}

- (NSString *) locale {
  return [[__locale retain] autorelease];
}

- (void) setLocale: (NSString *) locale {
  [locale retain];
  [__locale release];
  __locale = locale;
  __locale_isset = YES;
}

- (BOOL) localeIsSet {
  return __locale_isset;
}

- (void) unsetLocale {
  [__locale release];
  __locale = nil;
  __locale_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getBootstrapInfo_args"];
  if (__locale_isset) {
    if (__locale != nil) {
      [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __locale];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getBootstrapInfo_args("];
  [ms appendString: @"locale:"];
  [ms appendFormat: @"\"%@\"", __locale];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMGetBootstrapInfo_result : NSObject <NSCoding> {
  EDAMBootstrapInfo * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (EDAMBootstrapInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMBootstrapInfo * success;
#else

- (EDAMBootstrapInfo *) success;
- (void) setSuccess: (EDAMBootstrapInfo *) success;

#endif

- (BOOL) successIsSet;
@end

@implementation EDAMGetBootstrapInfo_result

- (id) initWithSuccess: (EDAMBootstrapInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (EDAMBootstrapInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMBootstrapInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMBootstrapInfo *fieldValue = [[EDAMBootstrapInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBootstrapInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetBootstrapInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMauthenticate_args : NSObject <NSCoding> {
  NSString * __username;
  NSString * __password;
  NSString * __consumerKey;
  NSString * __consumerSecret;

  BOOL __username_isset;
  BOOL __password_isset;
  BOOL __consumerKey_isset;
  BOOL __consumerSecret_isset;
}

- (id) initWithUsername: (NSString *) username password: (NSString *) password consumerKey: (NSString *) consumerKey consumerSecret: (NSString *) consumerSecret;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=consumerKey, setter=setConsumerKey:) NSString * consumerKey;
@property (nonatomic, retain, getter=consumerSecret, setter=setConsumerSecret:) NSString * consumerSecret;
#else

- (NSString *) username;
- (void) setUsername: (NSString *) username;

- (NSString *) password;
- (void) setPassword: (NSString *) password;

- (NSString *) consumerKey;
- (void) setConsumerKey: (NSString *) consumerKey;

- (NSString *) consumerSecret;
- (void) setConsumerSecret: (NSString *) consumerSecret;

#endif

- (BOOL) usernameIsSet;
- (BOOL) passwordIsSet;
- (BOOL) consumerKeyIsSet;
- (BOOL) consumerSecretIsSet;
@end

@implementation EDAMauthenticate_args

- (id) initWithUsername: (NSString *) username password: (NSString *) password consumerKey: (NSString *) consumerKey consumerSecret: (NSString *) consumerSecret
{
  self = [super init];
  __username = [username retain];
  __username_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  __consumerKey = [consumerKey retain];
  __consumerKey_isset = YES;
  __consumerSecret = [consumerSecret retain];
  __consumerSecret_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"consumerKey"])
  {
    __consumerKey = [[decoder decodeObjectForKey: @"consumerKey"] retain];
    __consumerKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"consumerSecret"])
  {
    __consumerSecret = [[decoder decodeObjectForKey: @"consumerSecret"] retain];
    __consumerSecret_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__consumerKey_isset)
  {
    [encoder encodeObject: __consumerKey forKey: @"consumerKey"];
  }
  if (__consumerSecret_isset)
  {
    [encoder encodeObject: __consumerSecret forKey: @"consumerSecret"];
  }
}

- (void) dealloc
{
  [__username release];
  [__password release];
  [__consumerKey release];
  [__consumerSecret release];
  [super dealloc];
}

- (NSString *) username {
  return [[__username retain] autorelease];
}

- (void) setUsername: (NSString *) username {
  [username retain];
  [__username release];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) consumerKey {
  return [[__consumerKey retain] autorelease];
}

- (void) setConsumerKey: (NSString *) consumerKey {
  [consumerKey retain];
  [__consumerKey release];
  __consumerKey = consumerKey;
  __consumerKey_isset = YES;
}

- (BOOL) consumerKeyIsSet {
  return __consumerKey_isset;
}

- (void) unsetConsumerKey {
  [__consumerKey release];
  __consumerKey = nil;
  __consumerKey_isset = NO;
}

- (NSString *) consumerSecret {
  return [[__consumerSecret retain] autorelease];
}

- (void) setConsumerSecret: (NSString *) consumerSecret {
  [consumerSecret retain];
  [__consumerSecret release];
  __consumerSecret = consumerSecret;
  __consumerSecret_isset = YES;
}

- (BOOL) consumerSecretIsSet {
  return __consumerSecret_isset;
}

- (void) unsetConsumerSecret {
  [__consumerSecret release];
  __consumerSecret = nil;
  __consumerSecret_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsumerKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsumerSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consumerKey_isset) {
    if (__consumerKey != nil) {
      [outProtocol writeFieldBeginWithName: @"consumerKey" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __consumerKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consumerSecret_isset) {
    if (__consumerSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"consumerSecret" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __consumerSecret];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authenticate_args("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",consumerKey:"];
  [ms appendFormat: @"\"%@\"", __consumerKey];
  [ms appendString: @",consumerSecret:"];
  [ms appendFormat: @"\"%@\"", __consumerSecret];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMAuthenticate_result : NSObject <NSCoding> {
  EDAMAuthenticationResult * __success;
  EDAMUserException * __userException;
  EDAMSystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

- (id) initWithSuccess: (EDAMAuthenticationResult *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMAuthenticationResult * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
#else

- (EDAMAuthenticationResult *) success;
- (void) setSuccess: (EDAMAuthenticationResult *) success;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

#endif

- (BOOL) successIsSet;
- (BOOL) userExceptionIsSet;
- (BOOL) systemExceptionIsSet;
@end

@implementation EDAMAuthenticate_result

- (id) initWithSuccess: (EDAMAuthenticationResult *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (EDAMAuthenticationResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMAuthenticationResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMAuthenticationResult *fieldValue = [[EDAMAuthenticationResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Authenticate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Authenticate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMrefreshAuthentication_args : NSObject <NSCoding> {
  NSString * __authenticationToken;

  BOOL __authenticationToken_isset;
}

- (id) initWithAuthenticationToken: (NSString *) authenticationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authenticationToken, setter=setAuthenticationToken:) NSString * authenticationToken;
#else

- (NSString *) authenticationToken;
- (void) setAuthenticationToken: (NSString *) authenticationToken;

#endif

- (BOOL) authenticationTokenIsSet;
@end

@implementation EDAMrefreshAuthentication_args

- (id) initWithAuthenticationToken: (NSString *) authenticationToken
{
  self = [super init];
  __authenticationToken = [authenticationToken retain];
  __authenticationToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authenticationToken"])
  {
    __authenticationToken = [[decoder decodeObjectForKey: @"authenticationToken"] retain];
    __authenticationToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authenticationToken_isset)
  {
    [encoder encodeObject: __authenticationToken forKey: @"authenticationToken"];
  }
}

- (void) dealloc
{
  [__authenticationToken release];
  [super dealloc];
}

- (NSString *) authenticationToken {
  return [[__authenticationToken retain] autorelease];
}

- (void) setAuthenticationToken: (NSString *) authenticationToken {
  [authenticationToken retain];
  [__authenticationToken release];
  __authenticationToken = authenticationToken;
  __authenticationToken_isset = YES;
}

- (BOOL) authenticationTokenIsSet {
  return __authenticationToken_isset;
}

- (void) unsetAuthenticationToken {
  [__authenticationToken release];
  __authenticationToken = nil;
  __authenticationToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthenticationToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"refreshAuthentication_args"];
  if (__authenticationToken_isset) {
    if (__authenticationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authenticationToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"refreshAuthentication_args("];
  [ms appendString: @"authenticationToken:"];
  [ms appendFormat: @"\"%@\"", __authenticationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMRefreshAuthentication_result : NSObject <NSCoding> {
  EDAMAuthenticationResult * __success;
  EDAMUserException * __userException;
  EDAMSystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

- (id) initWithSuccess: (EDAMAuthenticationResult *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMAuthenticationResult * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
#else

- (EDAMAuthenticationResult *) success;
- (void) setSuccess: (EDAMAuthenticationResult *) success;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

#endif

- (BOOL) successIsSet;
- (BOOL) userExceptionIsSet;
- (BOOL) systemExceptionIsSet;
@end

@implementation EDAMRefreshAuthentication_result

- (id) initWithSuccess: (EDAMAuthenticationResult *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (EDAMAuthenticationResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMAuthenticationResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMAuthenticationResult *fieldValue = [[EDAMAuthenticationResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshAuthentication_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshAuthentication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMgetUser_args : NSObject <NSCoding> {
  NSString * __authenticationToken;

  BOOL __authenticationToken_isset;
}

- (id) initWithAuthenticationToken: (NSString *) authenticationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authenticationToken, setter=setAuthenticationToken:) NSString * authenticationToken;
#else

- (NSString *) authenticationToken;
- (void) setAuthenticationToken: (NSString *) authenticationToken;

#endif

- (BOOL) authenticationTokenIsSet;
@end

@implementation EDAMgetUser_args

- (id) initWithAuthenticationToken: (NSString *) authenticationToken
{
  self = [super init];
  __authenticationToken = [authenticationToken retain];
  __authenticationToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authenticationToken"])
  {
    __authenticationToken = [[decoder decodeObjectForKey: @"authenticationToken"] retain];
    __authenticationToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authenticationToken_isset)
  {
    [encoder encodeObject: __authenticationToken forKey: @"authenticationToken"];
  }
}

- (void) dealloc
{
  [__authenticationToken release];
  [super dealloc];
}

- (NSString *) authenticationToken {
  return [[__authenticationToken retain] autorelease];
}

- (void) setAuthenticationToken: (NSString *) authenticationToken {
  [authenticationToken retain];
  [__authenticationToken release];
  __authenticationToken = authenticationToken;
  __authenticationToken_isset = YES;
}

- (BOOL) authenticationTokenIsSet {
  return __authenticationToken_isset;
}

- (void) unsetAuthenticationToken {
  [__authenticationToken release];
  __authenticationToken = nil;
  __authenticationToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthenticationToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUser_args"];
  if (__authenticationToken_isset) {
    if (__authenticationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authenticationToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUser_args("];
  [ms appendString: @"authenticationToken:"];
  [ms appendFormat: @"\"%@\"", __authenticationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMGetUser_result : NSObject <NSCoding> {
  EDAMUser * __success;
  EDAMUserException * __userException;
  EDAMSystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

- (id) initWithSuccess: (EDAMUser *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMUser * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
#else

- (EDAMUser *) success;
- (void) setSuccess: (EDAMUser *) success;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

#endif

- (BOOL) successIsSet;
- (BOOL) userExceptionIsSet;
- (BOOL) systemExceptionIsSet;
@end

@implementation EDAMGetUser_result

- (id) initWithSuccess: (EDAMUser *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (EDAMUser *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMUser *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMUser *fieldValue = [[EDAMUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUser_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUser_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMgetPublicUserInfo_args : NSObject <NSCoding> {
  NSString * __username;

  BOOL __username_isset;
}

- (id) initWithUsername: (NSString *) username;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
#else

- (NSString *) username;
- (void) setUsername: (NSString *) username;

#endif

- (BOOL) usernameIsSet;
@end

@implementation EDAMgetPublicUserInfo_args

- (id) initWithUsername: (NSString *) username
{
  self = [super init];
  __username = [username retain];
  __username_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain];
    __username_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
}

- (void) dealloc
{
  [__username release];
  [super dealloc];
}

- (NSString *) username {
  return [[__username retain] autorelease];
}

- (void) setUsername: (NSString *) username {
  [username retain];
  [__username release];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release];
  __username = nil;
  __username_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getPublicUserInfo_args"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getPublicUserInfo_args("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMGetPublicUserInfo_result : NSObject <NSCoding> {
  EDAMPublicUserInfo * __success;
  EDAMNotFoundException * __notFoundException;
  EDAMSystemException * __systemException;
  EDAMUserException * __userException;

  BOOL __success_isset;
  BOOL __notFoundException_isset;
  BOOL __systemException_isset;
  BOOL __userException_isset;
}

- (id) initWithSuccess: (EDAMPublicUserInfo *) success notFoundException: (EDAMNotFoundException *) notFoundException systemException: (EDAMSystemException *) systemException userException: (EDAMUserException *) userException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMPublicUserInfo * success;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) EDAMNotFoundException * notFoundException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
#else

- (EDAMPublicUserInfo *) success;
- (void) setSuccess: (EDAMPublicUserInfo *) success;

- (EDAMNotFoundException *) notFoundException;
- (void) setNotFoundException: (EDAMNotFoundException *) notFoundException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

#endif

- (BOOL) successIsSet;
- (BOOL) notFoundExceptionIsSet;
- (BOOL) systemExceptionIsSet;
- (BOOL) userExceptionIsSet;
@end

@implementation EDAMGetPublicUserInfo_result

- (id) initWithSuccess: (EDAMPublicUserInfo *) success notFoundException: (EDAMNotFoundException *) notFoundException systemException: (EDAMSystemException *) systemException userException: (EDAMUserException *) userException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __notFoundException = [notFoundException retain];
  __notFoundException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain];
    __notFoundException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__notFoundException release];
  [__systemException release];
  [__userException release];
  [super dealloc];
}

- (EDAMPublicUserInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMPublicUserInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMNotFoundException *) notFoundException {
  return [[__notFoundException retain] autorelease];
}

- (void) setNotFoundException: (EDAMNotFoundException *) notFoundException {
  [notFoundException retain];
  [__notFoundException release];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMPublicUserInfo *fieldValue = [[EDAMPublicUserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMNotFoundException *fieldValue = [[EDAMNotFoundException alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPublicUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 1];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 3];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPublicUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMgetPremiumInfo_args : NSObject <NSCoding> {
  NSString * __authenticationToken;

  BOOL __authenticationToken_isset;
}

- (id) initWithAuthenticationToken: (NSString *) authenticationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authenticationToken, setter=setAuthenticationToken:) NSString * authenticationToken;
#else

- (NSString *) authenticationToken;
- (void) setAuthenticationToken: (NSString *) authenticationToken;

#endif

- (BOOL) authenticationTokenIsSet;
@end

@implementation EDAMgetPremiumInfo_args

- (id) initWithAuthenticationToken: (NSString *) authenticationToken
{
  self = [super init];
  __authenticationToken = [authenticationToken retain];
  __authenticationToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authenticationToken"])
  {
    __authenticationToken = [[decoder decodeObjectForKey: @"authenticationToken"] retain];
    __authenticationToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authenticationToken_isset)
  {
    [encoder encodeObject: __authenticationToken forKey: @"authenticationToken"];
  }
}

- (void) dealloc
{
  [__authenticationToken release];
  [super dealloc];
}

- (NSString *) authenticationToken {
  return [[__authenticationToken retain] autorelease];
}

- (void) setAuthenticationToken: (NSString *) authenticationToken {
  [authenticationToken retain];
  [__authenticationToken release];
  __authenticationToken = authenticationToken;
  __authenticationToken_isset = YES;
}

- (BOOL) authenticationTokenIsSet {
  return __authenticationToken_isset;
}

- (void) unsetAuthenticationToken {
  [__authenticationToken release];
  __authenticationToken = nil;
  __authenticationToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthenticationToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getPremiumInfo_args"];
  if (__authenticationToken_isset) {
    if (__authenticationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authenticationToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getPremiumInfo_args("];
  [ms appendString: @"authenticationToken:"];
  [ms appendFormat: @"\"%@\"", __authenticationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMGetPremiumInfo_result : NSObject <NSCoding> {
  EDAMPremiumInfo * __success;
  EDAMUserException * __userException;
  EDAMSystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

- (id) initWithSuccess: (EDAMPremiumInfo *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EDAMPremiumInfo * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
#else

- (EDAMPremiumInfo *) success;
- (void) setSuccess: (EDAMPremiumInfo *) success;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

#endif

- (BOOL) successIsSet;
- (BOOL) userExceptionIsSet;
- (BOOL) systemExceptionIsSet;
@end

@implementation EDAMGetPremiumInfo_result

- (id) initWithSuccess: (EDAMPremiumInfo *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (EDAMPremiumInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EDAMPremiumInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EDAMPremiumInfo *fieldValue = [[EDAMPremiumInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPremiumInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPremiumInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMgetNoteStoreUrl_args : NSObject <NSCoding> {
  NSString * __authenticationToken;

  BOOL __authenticationToken_isset;
}

- (id) initWithAuthenticationToken: (NSString *) authenticationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authenticationToken, setter=setAuthenticationToken:) NSString * authenticationToken;
#else

- (NSString *) authenticationToken;
- (void) setAuthenticationToken: (NSString *) authenticationToken;

#endif

- (BOOL) authenticationTokenIsSet;
@end

@implementation EDAMgetNoteStoreUrl_args

- (id) initWithAuthenticationToken: (NSString *) authenticationToken
{
  self = [super init];
  __authenticationToken = [authenticationToken retain];
  __authenticationToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authenticationToken"])
  {
    __authenticationToken = [[decoder decodeObjectForKey: @"authenticationToken"] retain];
    __authenticationToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authenticationToken_isset)
  {
    [encoder encodeObject: __authenticationToken forKey: @"authenticationToken"];
  }
}

- (void) dealloc
{
  [__authenticationToken release];
  [super dealloc];
}

- (NSString *) authenticationToken {
  return [[__authenticationToken retain] autorelease];
}

- (void) setAuthenticationToken: (NSString *) authenticationToken {
  [authenticationToken retain];
  [__authenticationToken release];
  __authenticationToken = authenticationToken;
  __authenticationToken_isset = YES;
}

- (BOOL) authenticationTokenIsSet {
  return __authenticationToken_isset;
}

- (void) unsetAuthenticationToken {
  [__authenticationToken release];
  __authenticationToken = nil;
  __authenticationToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthenticationToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getNoteStoreUrl_args"];
  if (__authenticationToken_isset) {
    if (__authenticationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authenticationToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getNoteStoreUrl_args("];
  [ms appendString: @"authenticationToken:"];
  [ms appendFormat: @"\"%@\"", __authenticationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EDAMGetNoteStoreUrl_result : NSObject <NSCoding> {
  NSString * __success;
  EDAMUserException * __userException;
  EDAMSystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

- (id) initWithSuccess: (NSString *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) EDAMUserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) EDAMSystemException * systemException;
#else

- (NSString *) success;
- (void) setSuccess: (NSString *) success;

- (EDAMUserException *) userException;
- (void) setUserException: (EDAMUserException *) userException;

- (EDAMSystemException *) systemException;
- (void) setSystemException: (EDAMSystemException *) systemException;

#endif

- (BOOL) successIsSet;
- (BOOL) userExceptionIsSet;
- (BOOL) systemExceptionIsSet;
@end

@implementation EDAMGetNoteStoreUrl_result

- (id) initWithSuccess: (NSString *) success userException: (EDAMUserException *) userException systemException: (EDAMSystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (EDAMUserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (EDAMUserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (EDAMSystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (EDAMSystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          EDAMUserException *fieldValue = [[EDAMUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EDAMSystemException *fieldValue = [[EDAMSystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNoteStoreUrl_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNoteStoreUrl_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMUserStoreClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_checkVersion: (NSString *) clientName : (int16_t) edamVersionMajor : (int16_t) edamVersionMinor
{
  [outProtocol writeMessageBeginWithName: @"checkVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"checkVersion_args"];
  if (clientName != nil)  {
    [outProtocol writeFieldBeginWithName: @"clientName" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clientName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"edamVersionMajor" type: TType_I16 fieldID: 2];
  [outProtocol writeI16: edamVersionMajor];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"edamVersionMinor" type: TType_I16 fieldID: 3];
  [outProtocol writeI16: edamVersionMinor];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_checkVersion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMCheckVersion_result * result = [[[EDAMCheckVersion_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"checkVersion failed: unknown result"];
}

- (BOOL) checkVersion: (NSString *) clientName : (int16_t) edamVersionMajor : (int16_t) edamVersionMinor
{
  [self send_checkVersion: clientName : edamVersionMajor : edamVersionMinor];
  return [self recv_checkVersion];
}

- (void) send_getBootstrapInfo: (NSString *) locale
{
  [outProtocol writeMessageBeginWithName: @"getBootstrapInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getBootstrapInfo_args"];
  if (locale != nil)  {
    [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 1];
    [outProtocol writeString: locale];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMBootstrapInfo *) recv_getBootstrapInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMGetBootstrapInfo_result * result = [[[EDAMGetBootstrapInfo_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getBootstrapInfo failed: unknown result"];
}

- (EDAMBootstrapInfo *) getBootstrapInfo: (NSString *) locale
{
  [self send_getBootstrapInfo: locale];
  return [self recv_getBootstrapInfo];
}

- (void) send_authenticate: (NSString *) username : (NSString *) password : (NSString *) consumerKey : (NSString *) consumerSecret
{
  [outProtocol writeMessageBeginWithName: @"authenticate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (consumerKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"consumerKey" type: TType_STRING fieldID: 3];
    [outProtocol writeString: consumerKey];
    [outProtocol writeFieldEnd];
  }
  if (consumerSecret != nil)  {
    [outProtocol writeFieldBeginWithName: @"consumerSecret" type: TType_STRING fieldID: 4];
    [outProtocol writeString: consumerSecret];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMAuthenticationResult *) recv_authenticate
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMAuthenticate_result * result = [[[EDAMAuthenticate_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"authenticate failed: unknown result"];
}

- (EDAMAuthenticationResult *) authenticate: (NSString *) username : (NSString *) password : (NSString *) consumerKey : (NSString *) consumerSecret
{
  [self send_authenticate: username : password : consumerKey : consumerSecret];
  return [self recv_authenticate];
}

- (void) send_refreshAuthentication: (NSString *) authenticationToken
{
  [outProtocol writeMessageBeginWithName: @"refreshAuthentication" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"refreshAuthentication_args"];
  if (authenticationToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: authenticationToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMAuthenticationResult *) recv_refreshAuthentication
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMRefreshAuthentication_result * result = [[[EDAMRefreshAuthentication_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"refreshAuthentication failed: unknown result"];
}

- (EDAMAuthenticationResult *) refreshAuthentication: (NSString *) authenticationToken
{
  [self send_refreshAuthentication: authenticationToken];
  return [self recv_refreshAuthentication];
}

- (void) send_getUser: (NSString *) authenticationToken
{
  [outProtocol writeMessageBeginWithName: @"getUser" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUser_args"];
  if (authenticationToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: authenticationToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMUser *) recv_getUser
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMGetUser_result * result = [[[EDAMGetUser_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUser failed: unknown result"];
}

- (EDAMUser *) getUser: (NSString *) authenticationToken
{
  [self send_getUser: authenticationToken];
  return [self recv_getUser];
}

- (void) send_getPublicUserInfo: (NSString *) username
{
  [outProtocol writeMessageBeginWithName: @"getPublicUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPublicUserInfo_args"];
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMPublicUserInfo *) recv_getPublicUserInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMGetPublicUserInfo_result * result = [[[EDAMGetPublicUserInfo_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPublicUserInfo failed: unknown result"];
}

- (EDAMPublicUserInfo *) getPublicUserInfo: (NSString *) username
{
  [self send_getPublicUserInfo: username];
  return [self recv_getPublicUserInfo];
}

- (void) send_getPremiumInfo: (NSString *) authenticationToken
{
  [outProtocol writeMessageBeginWithName: @"getPremiumInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPremiumInfo_args"];
  if (authenticationToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: authenticationToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EDAMPremiumInfo *) recv_getPremiumInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMGetPremiumInfo_result * result = [[[EDAMGetPremiumInfo_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPremiumInfo failed: unknown result"];
}

- (EDAMPremiumInfo *) getPremiumInfo: (NSString *) authenticationToken
{
  [self send_getPremiumInfo: authenticationToken];
  return [self recv_getPremiumInfo];
}

- (void) send_getNoteStoreUrl: (NSString *) authenticationToken
{
  [outProtocol writeMessageBeginWithName: @"getNoteStoreUrl" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getNoteStoreUrl_args"];
  if (authenticationToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"authenticationToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: authenticationToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getNoteStoreUrl
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EDAMGetNoteStoreUrl_result * result = [[[EDAMGetNoteStoreUrl_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getNoteStoreUrl failed: unknown result"];
}

- (NSString *) getNoteStoreUrl: (NSString *) authenticationToken
{
  [self send_getNoteStoreUrl: authenticationToken];
  return [self recv_getNoteStoreUrl];
}

@end

@implementation EDAMUserStoreProcessor

- (id) initWithUserStore: (id <EDAMUserStore>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_checkVersion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"checkVersion"];
  }
  {
    SEL s = @selector(process_getBootstrapInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getBootstrapInfo"];
  }
  {
    SEL s = @selector(process_authenticate_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"authenticate"];
  }
  {
    SEL s = @selector(process_refreshAuthentication_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"refreshAuthentication"];
  }
  {
    SEL s = @selector(process_getUser_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUser"];
  }
  {
    SEL s = @selector(process_getPublicUserInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getPublicUserInfo"];
  }
  {
    SEL s = @selector(process_getPremiumInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getPremiumInfo"];
  }
  {
    SEL s = @selector(process_getNoteStoreUrl_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getNoteStoreUrl"];
  }
  return self;
}

- (id<EDAMUserStore>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_checkVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMcheckVersion_args * args = [[EDAMcheckVersion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMCheckVersion_result * result = [[EDAMCheckVersion_result alloc] init];
  [result setSuccess: [mService checkVersion: [args clientName]: [args edamVersionMajor]: [args edamVersionMinor]]];
  [outProtocol writeMessageBeginWithName: @"checkVersion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getBootstrapInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMgetBootstrapInfo_args * args = [[EDAMgetBootstrapInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMGetBootstrapInfo_result * result = [[EDAMGetBootstrapInfo_result alloc] init];
  [result setSuccess: [mService getBootstrapInfo: [args locale]]];
  [outProtocol writeMessageBeginWithName: @"getBootstrapInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_authenticate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMauthenticate_args * args = [[EDAMauthenticate_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMAuthenticate_result * result = [[EDAMAuthenticate_result alloc] init];
  [result setSuccess: [mService authenticate: [args username]: [args password]: [args consumerKey]: [args consumerSecret]]];
  [outProtocol writeMessageBeginWithName: @"authenticate"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_refreshAuthentication_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMrefreshAuthentication_args * args = [[EDAMrefreshAuthentication_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMRefreshAuthentication_result * result = [[EDAMRefreshAuthentication_result alloc] init];
  [result setSuccess: [mService refreshAuthentication: [args authenticationToken]]];
  [outProtocol writeMessageBeginWithName: @"refreshAuthentication"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getUser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMgetUser_args * args = [[EDAMgetUser_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMGetUser_result * result = [[EDAMGetUser_result alloc] init];
  [result setSuccess: [mService getUser: [args authenticationToken]]];
  [outProtocol writeMessageBeginWithName: @"getUser"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getPublicUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMgetPublicUserInfo_args * args = [[EDAMgetPublicUserInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMGetPublicUserInfo_result * result = [[EDAMGetPublicUserInfo_result alloc] init];
  [result setSuccess: [mService getPublicUserInfo: [args username]]];
  [outProtocol writeMessageBeginWithName: @"getPublicUserInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getPremiumInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMgetPremiumInfo_args * args = [[EDAMgetPremiumInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMGetPremiumInfo_result * result = [[EDAMGetPremiumInfo_result alloc] init];
  [result setSuccess: [mService getPremiumInfo: [args authenticationToken]]];
  [outProtocol writeMessageBeginWithName: @"getPremiumInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getNoteStoreUrl_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  EDAMgetNoteStoreUrl_args * args = [[EDAMgetNoteStoreUrl_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EDAMGetNoteStoreUrl_result * result = [[EDAMGetNoteStoreUrl_result alloc] init];
  [result setSuccess: [mService getNoteStoreUrl: [args authenticationToken]]];
  [outProtocol writeMessageBeginWithName: @"getNoteStoreUrl"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

